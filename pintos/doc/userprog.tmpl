		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//In process.c 
struct process_info{
	int argc;  			// The number of arguments passed.
	char *exec_ name 	// The executable name of the file.
	char *args_copy		// Pointer to arguments data in heap.
}

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The process_execute(), function is responsible for starting a user program. The 'char *file_name' argument passed to this function, contains the raw filename. This means the file name contains both the executable name and the arguments.So in process_execute(), we extract the file name and copy the argument strings to process_info struct. Then we send this struct to start_process() which further sends it to load().

The load() function makes a call to setup_stack(). Once the stack for the function is setup, void** esp will be initialized with PHYS_BASE, which is the top of the stack. Now we need to incrementally move the pointer and write data to the pointer. So we call our function parse_args(). In parse_args() we first calculate the total number of arguments provided in a variable 'argc'. Then we push the file's executable name and the arguments strings onto the stack ignoring the ' ' delimeter in order(argv[0]->argv[1]->.....->argv[argc-1]). We record the locations of the strings while pushing them to the stack. Now we push the reference of the argument strings in reverse order(&argv[argc-1]->.....->&argv[1]->&argc[0]). Finally we push in 'argc' onto the stack, followed by the return address which will be a null pointer.

The 'char *file_name' argument passed to process_execute is limited to PGSIZE, so we ensure that we only memcpy PAGESZ amount of data in the process_info struct, that we pass to start_process() and then to load(). Since the information we push to the stack may exceed the allocated page so we also check the size of data being pushed on the stack to ensure we are always writing within the stack boundaries.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok_r is a reentrant function. This means that during the course of it's execution, it can be interrupted, the interrupt may be serviced and then this function will resume it's functioning. strtok_r() function is defined as => char *strtok_r(char *str, const char *delim, char **saveptr). The saveptr argument is a pointer to a char *variable that is used internally by strtok_r to maintain context between successive calls that may be attempting to parse the same string. On the other hand the strtok() function uses a static buffer while parsing which is not safe if the function is preempted. Since it uses a static buffer, strtok() is niether thread safe, nor reentrant. If a funtion calls strtok(), no function that it calls while it is using strtok can also use strtok , and it cannot be called by any function that is itself using strtok. To avoid this Pintos implements strtok_r() and not strtok().

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

In the unix approach when the argument is processed in shell, it is done in user mode. While in Pintos OS the arguments are processed in kernel mode. The code executed in kernel mode has more privileges than a similar code in user mode, hence this code is more open to malicious code that can harm the system. So we can say that the unix approach is safer.

The kernel approach requires passed filename to be absolute, while the unix approach allows the user to get away with relative paths. This is due to the fact that in unix the shell that is processing the arguments has a better context of the executing enviornment than a kernel which only recieves the arguments as a pointer.

Since the shell is a system application, processing arguments in the shell, outside the kernel, simplifies the kernel code and can help prevent errors in kernel. The shell approach can preemptively check if the executable file exists before passing it to the kernel. It can further verify wether the arguments passed are as expected.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?



---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
